# -*- coding: utf-8 -*-
"""알고리즘 풀이.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D6eqwfRlHKTtLg2IWGM5hXuWnIoOu_Or
"""

print('강한친구 대한육군\n강한친구 대한육군')

print("\\    /\\\n )  ( \')\n(  /  )\n \\(__)|")

print("|\\_/|\n|q p|   /}\n( 0 )\"\"\"\\\n|\"^\"'    |\n||_/=\\\\__|")

print('|\_/|')
print('|q p|   /}')
print("( 0 )\"\"\"\\")
print('|"^"`    |')
print('||_/=\\__|')

#1000
# A+B
result = list(map(int,input().split()))
print(sum(result))

#1001 A-B
a,b = map(int, input().split())

print(a-b)

#10998 A*B
a,b = map(int, input().split())
print(a*b)

#1008 A/B
a,b = map(int, input().split())
print(a/b)

#10869 사칙연산
a,b = map(int, input().split())

print(a+b)
print(a-b)
print(a*b)
print(int(a/b))
print(a%b)

#10430 나머지
a,b,c = map(int, input().split())

print(  (a+b)%c )
print(  ((a%c)+(b%c))%c )
print(  (a*b)%c  )
print(  ((a%c)*(b%c))%c  )

#2588 곱셈
a = int(input())
b = input()

for i in range(2,-1,-1):
  print(a * int(b[i]))
print(a * int(b))

#1330 두 수 비교하기
a,b = map(int,input().split())

if b < a:
  print('<')
elif b > a:
  print('>')
else:
  print('==')

#9498번 시험 성적
a = int(input())

if a >= 90:
  print('A')
elif a >= 80:
  print('B')
elif a >= 70:
  print('C')
elif a >= 60:
  print('D')
else:
  print('F')

#2753 윤년
a = int(input())

if a%400 == 0:
  print(1)
elif (a%4==0) & (a%100 != 0):
  print(1)
else:
  print(0)

#14681 사분면 고르기
a = int(input())
b = int(input())

if (a>0) & (b>0):
  print(1)
elif (a < 0) & (b > 0):
  print(2)
elif (a < 0) & (b < 0):
  print(3)
elif (a > 0) & (b < 0):
  print(4)

#2884 알람 시계
a,b = map(int,input().split())

if ((b-45) < 0) & (a == 0):
  a = 24

time = (a*60)+b-45
print(f'{time//60} {time%60}')

#2739 구구단
a = int(input())

for i in range(1,10):
  print(f'{a} * {i} = {a*i}')

#10950 A+B-3
a = int(input())

for i in range(a):
  b,c = map(int,input().split())
  print(b+c)

#8393 합
a = int(input())
answer = 0

for i in range(1,a+1):
  answer += i

print(answer)

#15552 빠른A-B
  #파이참 사용
import sys
a = int(sys.stdin.readline())

for i in range(a):
  b,c = map(int,sys.stdin.readline().split())
  print(b+c)

#2741 N찍기
a = int(input())

for i in range(1,a+1):
  print(i)

#2742 기찍N
a = int(input())

for i in range(a,0,-1):
  print(i)

#11021 A+B-7
a = int(input())

for i in range(a):
  b,c = map(int,input().split())
  print(f'Case #{i+1}: {b+c}')

#11022 A+B-8
a = int(input())

for i in range(a):
  b,c = map(int,input().split())
  print(f'Case #{i+1}: {b} + {c} = {b+c}')

#2438 별찍기
a = int(input())

for i in range(1,a+1):
  print(i*'*')

#2439 별찍기 2
a = int(input())

for i in range(1, a+1):
  print(f"{' '*(a-i)}{'*'*i}")

#10871 X보다 작은수
a,b = map(int,input().split())
a_list = list(map(int,input().split()))

for i in a_list:
  if i < b :
    print(f'{i} ', end ='')

#10952 A+B-5
while True:
  a,b = map(int,input().split())

  if (a+b) < 1:
    break
    
  print(a+b)

#10951 A+B-4
  #예외처리
while True:
  try : 
    a,b = map(int,input().split())
    print(a+b)
  except:
    break

#1110 더하기 사이클
num = int(input())
check = num
new_num = 0
cycle = 0

while True:
  new_num = (num%10)*10 + (num//10 + num%10)%10
  cycle += 1
  num = new_num
  if new_num == check:
    break

print(cycle)

#10818 최소최대
a = int(input())
b = list(map(int,input().split()))

print(f"{min(b)} {max(b)}")

#2562 최댓값
  #9번 입력
a_list = []

for i in range(9):
  a_list.append(int(input()))

print(max(a_list))
print(a_list.index(max(a_list))+1)

#2577 숫자의개수
a = int(input())
b = int(input())
c = int(input())
d = str(a*b*c)

for i in range(0,10):
  print(d.count(f'{i}'))

#3052 나머지
a = []
for i in range(10):
  a.append(int(input())%42)

print(len(list(set(a))))

#1546 평균
n = int(input())
n_list = list(map(int,input().split()))
n_max = max(n_list)
new_list = []

for i in n_list:
  new_list.append(i/n_max*100)

print(sum(new_list)/len(new_list))

#8958 OX퀴즈
a = int(input())

def f_sum(n):
  num = 0
  for i in range(1,n+1):
    num += i
  return num

for i in range(a):
  answer = 0
  a_list = input().split('X')
  print(a_list)
  for j in a_list:
    answer += f_sum(j.count('O'))

  print(answer)

#4344 평균은 넘겠지
a = int(input())

for i in range(a):
  winner = []
  a_list = list(map(int,input().split()))
  a_avr = sum(a_list[1:])/a_list[0]

  for j in range(1,a_list[0]+1):
    if a_list[j] > a_avr:
      winner.append(a_list[j])

  print(f"{len(winner)/a_list[0]*100:.3f}%")

#15596 정수N개의 합
def slove(a_list):
  return(sum(a_list))

slove([1,2,3])

#4673 셀프넘버_ 시간초과
self_num = list(range(1,10001))

for i in self_num:
  x1 = 0
  while x1 < 10000:
    x1 = i + (i//10000) + ((i//1000)%10) + ((i//100)%10) + ((i//10)%10) + (i%10)
    if x1 in self_num:
      self_num.remove(x1)
    i = x1

for i in self_num:
  print(i)

#4673 셀프넘버 _ 통과 ><
not_self_num = []   #셀프넘버가 아닌 수_생성수
self_num = set(range(1,10001)) #셀프넘버가 저장될 1~10000까지 숫자 집합

for i in range(1,10001):  #1~10000
  x1 = 0
  while x1 < 10000:   #생성수가 10000을 넘어가면 break
    x1 = i + (i//10000) + ((i//1000)%10) + ((i//100)%10) + ((i//10)%10) + (i%10) #생성수 알고리즘
    not_self_num.append(x1) #생성수.append
    i = x1  #생성수 cycle
  not_self_num = list(set(not_self_num)) #생성수에서 조합(set) 이용해서 중복제거

for i in sorted(list(self_num - set(not_self_num))): #1~10000 까지 숫자 리스트에서 생성수리스트 차집합 후 정렬하여 출력
  print(i)

#1065 한수
n = int(input())#정수형으로 입력
hansu = [] #한수를 저장할 빈 리스트

for i in range(1,n+1):
  if i < 100:
    hansu.append(i)
  else:
    if (((i//10)%10) - (i//100)) == ((i%10)-((i//10)%10)):
      hansu.append(i)

print(len(hansu))

#한수 현진쓰 풀이
n = int(input())
a = set(range(1,n+1))
b = set()

for i in a:
  for j in range(1, len(str(i))-1):
    if int(str(i)[j-1]) - int(str(i)[j]) != int(str(i)[j]) - int(str(i)[j+1]):
      b.add(i)

num_list = a-b
print(len(num_list))

#11654 아스키코드
print(ord(input()))

#11720 숫자의합
a = input()
b = list(map(int,list(input())))
# map(함수, 리스트)
print(sum(b))

n = int(input())
num=[]
for i in range(n):
  a = int(input())
  num.append(a)
print(sum(num))

#나머지와 몫이 같은 수 구하기
answer = []

num = int(input())
# i = 1

for i in range(1,num**2):
  if i//num == i%num:
    answer.append(i)

print(sum(answer))

#나머지와 몫이 같은 수 구하기 현진쓰풀이
list_n = []
n = int(input())

for i in range(n):
  a = (n+1) * i
  list_n.append(a)

print(sum(list_n))

#나머지와 몫이 같은 수 구하기 #한줄풀이
n = int(input())
print(sum([(n+1)*i for i in range(n)]))

#10809 알파벳찾기 
  #chr, ord
a = input()
  #97 = a
  #122 = z
for i in range(97,123):
  if chr(i) in a:
    print(a.index(chr(i)))
  else:
    print(-1)

#2675 문자열 반복
cycle = int(input())

for _ in range(cycle):
  n, string = input().split()
  answer = []
  for j in list(string):
    answer.append(j * int(n))
  print(''.join(answer))

#문자열반복 현진쓰풀이
try:
  N, string = input().split()
  n = int(N)
  total_string = ''
  for i in range(len(string)) :
    total_string += str(string[i] * n)
  print(total_string)
except:
  pass

#1157 단어 공부
  #A = 65
  #Z = 90
a_list = []
a = input().upper()
  
for i in range(65,91):
  a_list.append(a.count(chr(i)))

if a_list.count(max(a_list))==1:
  print(chr(a_list.index(max(a_list))+65))
else:
  print('?')

#1152 단어의 개수
print(len(input().split()))

#2908 상수
print(max(list(map(lambda x: x[::-1] ,list(input().split())))))

#5622 다이얼
num = list(input())
cnt = 0

dial = [[],['A','B','C'],['D','E','F'],['G','H','I'],
        ['J','K','L'],['M','N','O'],['P','Q','R','S'],
        ['T','U','V'],['W','X','Y','Z']]

for n in num:
  for i in range(len(dial)):
    if n in dial[i]:
      cnt += (i+2)

print(cnt)

#2941 크로아티아 알파벳
c_num = input()
c_num_list = ['c=','c-','dz=','d-','lj','nj','s=','z=']
c_cnt = 0
z_cnt = 0
c_cnt_list = []

for num in c_num_list:
  if num in c_num:
    if num == 'z=':
      z_cnt += (c_num.count('z=')-c_num.count('dz='))
      for i in range(z_cnt):
        c_cnt_list.append('z=')
      c_cnt += z_cnt
    else:
      c_cnt += c_num.count(num)
      for i in range(c_num.count(num)):
        c_cnt_list.append(num)

print(len(c_cnt_list)+(len(c_num)-len(''.join(c_cnt_list))))

#2941 크로아티아알파벳
c_num = input()
c_num_list = ['c=','c-','dz=','d-','lj','nj','s=','z=']

for num in c_num_list:
  c_num = c_num.replace(num,',')

print(len(c_num))

#1316 그룹단어체커
times = int(input())
not_g = 0

for cycle in range(times):
  
  check_list = []
  key = list(input())

  for i in range(len(key)):
    
    if key[i] in check_list:
      not_g += 1
      break

    if i < len(key)-1:
      if key[i] != key[i+1]:
        check_list.append(key[i])
  
print(times-not_g)

#1316 그룹단어체커
times = int(input())
not_g = 0

for _ in range(times):
  
  check_list = []
  key = list(input())

  for idx,value in enumerate(key):
      
    if value in check_list:
      not_g += 1
      break

    if idx < len(key)-1:
      if key[idx] != key[idx+1]:
        check_list.append(value)
  
print(times-not_g)

"""#알고리즘수업 #휴식을위하여
- 공사현장은 (a,b)
- 공사현장에서 R만큼 떨어져야한다.
- 공원에는 그늘이 N개 존재함
- 그늘의 위치는 (x_i,y_i)
- 각 그늘이 공사현장에서 R이상 떨어진 그늘인지 판별.
"""

#알고리즘수업 #휴식을위하여 #피타고라스 정리 #원지름
a,b,R = map(int,input().split())
n = int(input())

for _ in range(n):
  x_i,y_i = map(int,input().split())
  print('조용해~' if (x_i-a)**2 + (y_i-b)**2 >= R**2 else '시끄러!!!')

#토너먼트 팀짜기
import random

team = list(range(1,9))

for _ in range(4):
  team1=team2=0

  team1 = random.choice(team)
  team.remove(team1)
  team2 = random.choice(team)
  team.remove(team2)

  print(team1,team2)

#토너먼트 팀짜기
import random

team = list(range(1,9))

random.shuffle(team)

for i in range(0,8,2):
  print(team[i:i+2])

#twoSum

def solution(nums,target):
  for i in range(len(nums)):
    for j in range(i+1):
      if nums[i] + nums [j]==target:
        print(i,j)
        

solution([1,2,3,4],6)

#알고리즘수업 #약수구하기
num = int(input())
yak = []
for i in range(1,int(num**(1/2))):
  if num%i==0:
    yak.append(i)
    yak.append(num//i)

print(sorted(list(set(yak))))

#알고리즘수업 #내림차순정렬
nums = list(map(int,input().split()))
answer_list = []
max_num = nums[0]


for i in range(len(nums)):
  for i in nums:
    if i > max_num:
      max_num = i

  if len(nums) > 1:
    answer_list.append(max_num)
    nums.remove(max_num)
    max_num = nums[0]
  else:
    answer_list.append(nums[0])

print(answer_list)

#알고리즘수업 #최대값,최소값 구하기
nums = list(map(int,input().split()))

max_num = nums[0]
min_num = nums[1]

for num in nums:
  if num > max_num:
    max_num = num
  if num < min_num:
    min_num = num

print(max_num,min_num)

#1712 손익분기점 _ 런타임에러
A,B,C = map(int,input().split())

break_even_point = (A//(C-B)+1)

print(break_even_point) if break_even_point > 0 else print(-1)

#1712 손익분기점
A,B,C = map(int,input().split())

print(int(A//(C-B)+1)) if B<C else print(-1)

#2292 벌집
target = int(input())

address = 1
area = 1

while target > address:
  address += area*6
  area += 1

print(area)

#1193 분수찾기
target = int(input())

address = 0
step = 1

#target의 구역찾기
#target의 값이 해당 area의 몇번째 자리인지
#target이 속하는 area는 step-1값
while target > address:
  address += step
  step += 1

turn = address - target
area = step-1

#area의 홀짝여부에 따른 위치탐색
if area % 2 == 0:
  x_i, y_i = area,1
  for _ in range(1,turn+1):
    x_i -= 1
    y_i += 1
else:
  x_i, y_i = 1,area
  for _ in range(1,turn+1):
    x_i += 1
    y_i -= 1

print(f'{x_i}/{y_i}')

#1193 분수찾기
N = int(input())
line = 1

while N > line:
  N -= line
  line += 1

if line % 2 == 0:
  x = N
  y = line - N + 1
else:
  x = line - N + 1
  y = N

print(f'{x}/{y}')

#2869 달팽이는 올라가고 싶다
import math

A, B, V = map(int,input().split())

print( (V-A-1) // (A-B) + 2)

#10250 ACM호텔
cycle = int(input())

for _ in range(cycle):
  H, W, N = map(int,input().split())

  a,b = divmod(N,H)
  if b == 0:
    print( (H*100) + a)
  elif a == 0:
    print( (N*100) + 1)
  else:     
    print( (b*100) + (a+1) )

#10757 큰수A+B
print(sum(map(int,input().split())))

#프로그래머스 #약수의개수와덧셈
def solution(left,right):

  answer = 0

  for num in range(left,right+1):
    
    yak_list = []
    
    for j in range(1,num+1):
      if num%j == 0:
        yak_list.append(j)
      
    if len(yak_list) % 2 == 0:
      answer += num
    else:
      answer -= num

  return answer

solution(13,17)

#프로그래머스 #약수의개수와덧셈 #이상적풀이
def solution(left,right):
  answer = 0

  for num in range(left,right+1):
    if int(num**0.5) == num**0.5:
      answer -= num
    else:
      answer += num
  return answer

solution(13,17)

#프로그래머스 #로또의 최고순위와 최저순위
def solution(lottos, win_nums):
  
  score = [6,6,5,4,3,2,1]  

  lotto_cnt = 0
  zero_cnt = lottos.count(0)

  for num in lottos:
    if num in win_nums:
      lotto_cnt += 1
  
  return [score[lotto_cnt+zero_cnt],score[lotto_cnt]]

solution([0,0,0,0,0,0],[31, 10, 45, 1, 6, 19])

#프로그래머스 #신규아이디추천
def solution(new_id):

  rule = '.-_'
  new_answer = ''

  #대문자 -> 소문자 치환
  answer = new_id.lower()

  #조건에 부합하지 않는 문자 제거
  for value in answer:
    if value.isalpha() or value.isdigit() or (value in rule):
      new_answer += value
  answer = new_answer

  # 마침표(.)가 연속으로 등장한 부분 마침표(.)한개로 변환
  while '..' in answer:
    answer = answer.replace('..','.')

  # 마침표(.)위치가 처음이나 끝 이라면 제거
  if len(answer) > 2:
    if answer[0] == '.':
      answer = answer[1:]
    if answer[-1] == '.':
      answer = answer[:-1]
  else:
    if answer[0] == '.':
      answer = ''

  # new_id의 길이가 16이상이라면 앞에서부터 15글자 제외한 문자를 제거 
  if len(answer) >= 16:
    answer = answer[:15]

  # new_id가 빈 문자열이라면 'a' 대입.
  if len(answer) == 0:
    answer = 'a'

  # 제거후 마지막 글자가 마침표(.)라면 제거 
  if answer[-1] == '.':
    answer = answer[:-1]
      
  # new_id의 길이가 2글자 이하라면 new_id의 마지막 문자를 길이가 3이 될때까지 붙여준다  
  while len(answer)<3:
    answer += answer[-1]
    
  return answer

solution("....!@BaT#*..y.abcdefghijDDDDklm")

#프로그래머스 #신규아이디추천 #정규표현식
import re

def solution(id):
  #1단계
  id = id.lower()

  #2단계
  id = re.sub('[^a-z0-9\-_.]','', id)

  #3단계
  id = re.sub('\.+', '../../../Downloads', id)

  #4단계
  id = id.strip('.')

  #5단계,6단계 (글자길이 0 일때 a 삽입 및 글자수 15글자 제한)
  id = 'a' if len(id) == 0 else id[:15]

  #6단계( 끝 마침표(.)제거 )
  id = id.strip('.')

  #7단계
  while len(id) < 3 : id += id[-1]

  return id

solution("....!@BaT#*..y.abcdefghijDDDDklm")

#프로그래머스 #크레인인형뽑기게임

def solution(board, moves):
  basket = []
  cnt = 0

  for pick in moves:#-----------------move에 담긴 value 가져옴
        for area in board:#-----------board 가로줄 스캔

        if area[pick-1] != 0:#--------해당 가로줄의 pick-1 번째가 0이 아닐 경우
          basket.append(area[pick-1])#[pick-1]인형 stack에 넣고 인형 0으로 바꿈
          area[pick-1] = 0

        if len(basket) > 1:#----------stack길이가 1이상 일때 같은 인형 삭제
          if basket[-1] == basket[-2]:
            cnt += 2#-----------------인형은 2개씩 터짐
            del basket[-2:]#----------끝에서 2개 삭제
        break

  return cnt

solution([[0, 0, 1, 0, 0],  
          [0, 0, 1, 0, 0],
          [0, 2, 1, 0, 0],
          [0, 2, 1, 0, 0],
          [0, 2, 1, 0, 0]],
          [1, 2, 3, 3, 2, 3, 1]
          )

#알고리즘수업 #스택문제 #append, pop만 사용
def stack_solution(command):
  cycle = 0
  com = 0
  num = 0
  cnt = 0

  #stack의 길이 구하기
  if stack:
    for _ in stack:
      cnt += 1
      stack_cnt = cnt
  else:
    stack_cnt = 0
  #push
  if command[0] == 'push':
    stack.append(command[1])
  #pop
  elif command[0] == 'pop':
    print(stack.pop()) if stack_cnt else print(-1)
  #size
  elif command[0] == 'size':
    print(stack_cnt)
  #empty
  elif command[0] == 'empty':
    print(0 if stack_cnt else 1)
  #top
  elif command[0] == 'top':
    print(stack[stack_cnt-1]) if stack_cnt else print(-1)
    
n = int(input())
stack = []

for _ in range(n):
  command = input().split(' ')
  stack_solution(command)

#알고리즘수업 #스택문제 #append,pop 사용불가

def stack_solution(command,stack):
  cnt = 0

  #stack의 길이 구하기
  if stack:
    for _ in stack:
      cnt += 1
      stack_cnt = cnt
  else:
    stack_cnt = 0

  #push
  if command[0] == 'push':
    stack += list(command[1])
  #pop
  elif command[0] == 'pop':
    if not(stack):
      print(-1)
    elif stack_cnt == 1:
      print(stack[0])
      stack = []
      return stack
    else:
      print(stack[stack_cnt-1])
      stack = stack[:stack_cnt-1]
      print(stack)
      return stack
  #size
  elif command[0] == 'size':
    print(stack_cnt)
  #empty
  elif command[0] == 'empty':
    print(0 if stack_cnt else 1)
  #top
  elif command[0] == 'top':
    print(stack[stack_cnt-1]) if stack_cnt else print(-1)
    
n = int(input())
global stack
stack = []

for _ in range(n):
  command = input().split(' ')
  stack_solution(command,stack)
  print('i',stack)

#프로그래머스 #이상한문자
def solution (n):
  s_cnt = 0
  answer = ''

  for i in n:
    if i == ' ':
      s_cnt = 0
    else:
      s_cnt += 1

    if s_cnt:
      if s_cnt%2 == 1: answer += i.upper()
      else: answer += i.lower()
    else:
      answer += i
  return answer

solution("try hello world")

#프로그래머스 #키패드 누르기
key_pad = ['*','7','4','1','0','8','5','2','#','9','6','3']#---(0,0)= *

def search(n):#------------------------좌표평면 호출 함수(X,Y)
  return key_pad.index(n)//4, key_pad.index(n)%4 

def gap(a1, a2):#----------------------두 좌표 거리 호출 함수
  return (abs(a1[0]-a2[0]) + abs(a1[1]-a2[1]))

def solution(numbers, hand):

  left_hand = (0,0)
  right_hand = (2,0)
  answer = ''

  for num in numbers:
    result = search(str(num))#-----------키패드에서 (X,Y)를 탐색해서 result에 저장

    if result[0] == 0:#------------------X축이 0일때(*,7,4,1) L값 추가 / 왼손 현위치 저장
      answer += 'L'
      left_hand = result

    elif result[0] == 2:#------------------X축이 2일때(#,9,6,3) R값 추가 / 오른손 현위치 저장
      answer += 'R'
      right_hand = result

    elif result[0] == 1:#------------------X축이 1일때(0,8,5,2)
      left_gap = gap(left_hand,result)#-----gap함수 이용 거리저장
      right_gap = gap(right_hand,result)

      if left_gap == right_gap:#----------거리 같을 때 왼손/오른손 잡이 판별
        if hand == 'right':
          answer += 'R'
          right_hand = result
        else:
          answer += 'L'
          left_hand = result
      elif left_gap < right_gap:#-------왼손이 가까울 때
        answer += 'L'
        left_hand = result
      elif right_gap < left_gap:#-------오른손이 가까울 때
        answer += 'R'
        right_hand = result

  return answer


# solution([1, 3, 4, 5, 8, 2, 1, 4, 5, 9, 5],"right")
# solution([7, 0, 8, 2, 8, 3, 1, 5, 7, 6, 2],"left")
solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], "right")

#프로그래머스 #K번째수
def solution(a_array, command):
  answer = []

  for com in command:
    
    start,end,select = com

    answer.append(sorted(a_array[ start-1 : end ])[select-1])

  return answer
    

solution([1, 5, 2, 6, 3, 7, 4],[[2, 5, 3], [4, 4, 1], [1, 7, 3]])

#프로그래머스 #K번째수 #lambda함수
def solution(array,command):
  return list(map(lambda x:sorted(array[x[0]-1 : x[1]])[x[2]-1], command))

solution([1, 5, 2, 6, 3, 7, 4],[[2, 5, 3], [4, 4, 1], [1, 7, 3]])

#프로그래머스 #3진법
def solution(number):
  three = ""
  cycle = 0

  while number > 0:
    a1,a2 = divmod(number,3)
    number = a1
    three += str(a2)

  return int(three,3)

solution(45)

#프로그래머스 #예산
def solution(d, budget):
  check = 0
  d_list = sorted(d)


  for idx, value in enumerate(d_list):

    if sum(d_list) < budget:
      idx = len(d_list)
      
    if check > budget:
      idx -= 1
      break
    check += value

  if check == budget:
      idx += 1

  return idx

solution([1],9)
# solution([2,2,3,3],10)

#프로그래머스 #예산 # 눈물 똑똑 ㅠㅜ
def solution(d, budget):
  d.sort()

  while budget > sum(d):
    d.pop()

  return len(d)

solution([2,2,3,3],10)

#알고리즘수업 #자료구조 #스택
class Stack:
    def __init__(self, n):
        self.stack = [None for _ in range(n)]
        self.stack_size = 0
    
    def push(self, num):
        # self.stack.append(int(num))
        self.stack[self.stack_size] = int(num)
        self.stack_size += 1

    def pop(self):
        if self.size() > 0:
            last_val = self.top()
            self.stack[self.stack_size-1] = None
            self.stack_size -= 1
            return last_val
            # return self.stack.pop()
        
        return -1

    def size(self):
        return self.stack_size
    
    def empty(self):
        if self.size() > 0:
            return 0
        
        return 1
        
        # print(int(self.stack_size <= 0))
    
    def top(self):
        if self.size() > 0:
            return self.stack[self.size()-1]
        
        return -1

def run_with_cmd_stack(obj_stack, cmd_list):
    cmd_type = cmd_list[0]
    
    if cmd_type == "push":
        _, num = cmd_list
        obj_stack.push(num)
    elif cmd_type == "pop":
        print(obj_stack.pop())
    elif cmd_type == "size":
        print(obj_stack.size())
    elif cmd_type == "empty":
        print(obj_stack.empty())
    elif cmd_type == "top":
        print(obj_stack.top())
    
    return obj_stack

n = int(input())
obj_stack = Stack(n)

for _ in range(n):
    # "push 2".split(" ") # => ["push", "2"]
    # "size".split(" ") # => ["size"]

    cmd_list = input().split(" ")
    obj_stack = run_with_cmd_stack(obj_stack, cmd_list)
    # print(obj_stack.stack)
    # print(obj_stack.stack_size)

    # if result is not None:
    #     stack = result

#알고리즘수업 #자료구조 #큐
class Que:
    def __init__(self, n):
        self.que = [None for _ in range(n)]
        self.back_point = n
        self.front_point = n

    def push(self, num):
        self.que[self.back_point-1] = int(num)
        self.back_point -= 1
    
    def pop(self):
      if self.size() > 0:
        last_val = self.front()
        self.front_point -= 1
        return last_val
      return -1

    def size(self):
      return self.front_point - self.back_point

    def empty(self):
      if self.size() > 0:
        return 0
      return 1

    def back(self):
      return self.que[self.back_point]

    def front(self):
      return self.que[self.front_point-1]



def run_with_cmd_que(obj_que, cmd_list):
    cmd_type = cmd_list[0]

    if cmd_type == "push":
          _, num = cmd_list
          obj_que.push(num)
    elif cmd_type == "pop":
        print(obj_que.pop())
    elif cmd_type == "size":
        print(obj_que.size())
    elif cmd_type == "empty":
        print(obj_que.empty())
    elif cmd_type == "front":
        print(obj_que.front())
    elif cmd_type == "back":
        print(obj_que.back())
    
    return obj_que

n = int(input())
obj_que = Que(n)

for _ in range(n):
  cmd_list = input().split(' ')
  obj_que = run_with_cmd_que(obj_que, cmd_list)
  print(obj_que.que)

#백준 #ACM호텔
times = int(input())

for _ in range(times):
  H,W,N = map(int,input().split())

  if N%H==0:
    print((H*100) + (N//H))
  else:
    print((N%H*100) + (N//H)+1)

#프로그래머스 #실패율 #시간초과
import operator

def solution(N, stages):
  answer = {}
  
  for stage in range(1,N+1):

    not_clear = list(filter(lambda x: x <= stage ,stages)) # 클리어 하지 못한 사람
    arrive = list(filter(lambda x : x >= stage,stages )) # 스테이지 도착한 사람

    try :answer[stage] = len(not_clear) / len(arrive) #실패율구하기
    except: answer[stage] = 0

    print('클리어 하지 못한 사람',not_clear)
    print('스테이지에 도달한 사람',arrive)

    stages = [ x for x in stages if x not in not_clear ] #리스트 빼기
    
    result = sorted(answer.items(), key=operator.itemgetter(1),reverse=True) # 스테이지별 실패율 정렬

  return [x[0] for x in result] # 정렬값의 key 반환

    

solution(5,[2, 1, 2, 6, 2, 4, 3, 3])

#프로그래머스 #실패율
import operator

def solution(N, stages):
  answer = {}
  
  for stage in range(1,N+1):

    not_clear = 0
    arrive = 0

    for value in stages:
      if (stage-1) < value <= stage:
        not_clear += 1
      if value >= stage:
        arrive += 1

    try :answer[stage] = not_clear / arrive #실패율구하기
    except: answer[stage] = 0
    
    # 스테이지별 실패율 정렬 방법
    #result = sorted(answer.items(), key=operator.itemgetter(1),reverse=True) 
    result = sorted(answer, key= lambda x:answer[x],reverse = True)
    #result = sorted(answer, key= answer.get,reverse= True)

  return result # 정렬값의 key 반환


solution(5,[2, 1, 2, 6, 2, 4, 3, 3])

#백준 #2775 #부녀회장

def address(floors, number):
  apt = []

  for floor in range(floors+1):
    floor_array = []
    A = 1

    for num in range(1,number+1):
      if floor == 0:
        floor_array.append(num)
      else:
        floor_array.append(A)
        try:A += apt[floor-1][num]
        except: pass
    
    apt.append(floor_array)  

  print( apt[floors][number-1] )


times = int(input())

for _ in range(times):
  floor = int(input())
  number = int(input())

  address(floor,number)

#백준 #2775 #부녀회장이 되고싶어

def address(floors, number):

  for floor in range(0,floors+1):

    #0층 일때 배열 생성
    if floor==0:  
      f_array = [i for i in range(1, number+1)]
      print(f_array)
    #1 ~ N층 까지
    else:
      for num in range(1,number):
        f_array[num] = f_array[num-1] + f_array[num]
        print(f_array)

  print(f_array[number-1])

#---------------------------------------------
times = int(input())

for _ in range(times):
  floor = int(input())
  number = int(input())
  address(floor,number)